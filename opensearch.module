<?php

/**
 * @file
 * Allows Drupal search results to be returned in the OpenSearch RSS format.
 */

class OpenSearch implements ArrayAccess {
  /**
   * The API version currently implemented by the class.
   */
  const API_VERSION = '2.1';

  protected $settings = array();
  protected $type;

  /**
   * Constructs an OpenSearch object.
   *
   * @param $type
   *  The name of the search module.
   */
   protected function __construct($type) {
    $this->type = $type;
  }

  /**
   * Adds the feed link.
   */
  function addFeed() {
    $keywords = trim(search_get_keys());
    $stored_feed_links = &drupal_static('opensearch_add_feed', array());

    if ($keywords) {
      $rss_title = $this->checkPlain($this->settings['rss_title']);

      $query = array();
      foreach ($_GET as $index => $value) {
        if ($index != 'q') {
          $query[$index] = $value;

          if ($index == 'page') {
            $query[$index]++;
          }
        }
      }

      $rss_url = $this->url(
        'opensearch', '/' . drupal_urlencode($keywords),
        array('query' => $query)
      );

      $stored_feed_links[$rss_url] = theme('feed_icon', array('url' => $rss_url, 'title' => $rss_title));

      drupal_add_html_head_link(array(
        'rel' => 'alternate',
        'type' => 'application/rss+xml',
        'title' => $rss_title,
        'href' => $rss_url,
      ));
    }
  }

  /**
   * Adds a OpenSearch link in the HTTP response header for the current page.
   */
  function addLink() {
    $link = array(
      'href' => $this->url('opensearch'),
      'title' => $this->checkPlain($this->settings['longname']),
      'rel' => 'search',
      'type' => 'application/opensearchdescription+xml',
    );

    drupal_add_html_head_link($link);
  }

  /**
   * Verifies the current API version is included between two values passes as
   * arguments.
   *
   * @param $minimum
   *   The minimum API version required.
   * @param $maximum
   *   The maximum version required. This argument is optional; the current API
   *   will be checked against this value only if it is passed to the function.
   *
   * @return
   *   TRUE, if the current API version is included between the passed values.
   */
  public static function api($minimum, $maximum = NULL) {
    if (version_compare(self::API_VERSION, $minimum, '<')) {
      return FALSE;
    }

    if (isset($maximum) && version_compare(self::API_VERSION, $maximum, '>')) {
      return FALSE;
    }

    return TRUE;
  }

  /**
   * Encode special characters in a OpenSearch descriptor string.
   *
   * @param $string
   *   The string to be filtered.
   * @param $length
   *   The length of the returned string; if the parameter is not used,
   *   or it is equal to 0, then the string will not be truncated.
   *
   * @return
   *  The filtered string.
   */
  function checkPlain($string, $length = 0) {

    $result = check_plain(
      strip_tags(
        decode_entities(
          preg_replace('/(\r\n?|\n)/', '', token_replace($string, array('search' => $this->type)))
        )
      )
    );

    if ($length) {
      $result = truncate_utf8($result, $length);
    }

    return $result;
  }

  /**
   * Returns the default settings values.
   *
   * @return
   *   An array of default values.
   *
   * @see OpenSearch::loadSettings()
   * @see OpenSearch::saveSettings()
   */
  protected function defaultSettings() {
    $defaults = array(
      'adult_content' => 0,
      'attribution' => '',
      'contact' => '[site-mail]',
      'description' => '[search-name] search for [site-name].',
      'image_type' => 'theme',
      'image_custom' => '',
      'longname' => '[search-name] search for [site-name]',
      'rss_description' => '[search-name] search results for "[search-keywords]" at [site-name]',
      'rss_title' => '[site-name] [search-name] search: [search-keywords]',
      'shortname' => '[search-name] search',
      'syndication_right' => 'open',
      'tags' => '',
    );

    drupal_alter('opensearch_default_settings', $defaults);

    return $defaults;
  }

  /**
   * Renders an OpenSearch feed.
   *
   * @param $keywords
   *   The keywords used for the search.
   * @param $results
   *  An array containing the search results.
   *
   * @return
   *   The XML content for the Opensearch feed.
   */
  function feed($keywords, $results = NULL) {
    global $base_url;

    $items = '';
    $namespaces = array(
      'xmlns:atom' => 'http://www.w3.org/2005/Atom',
      'xmlns:opensearch' => 'http://a9.com/-/spec/opensearch/1.1/',
      'xmlns:relevance' => 'http://a9.com/-/opensearch/extensions/relevance/1.0/',
    );

    if (!isset($results)) {
      $results = module_invoke($this->type, 'search', 'search', $keywords);
    }

    foreach ($results as $result) {
      // Merge some default values into the search result to avoid PHP notices.
      $result += array('snippet' => '');

      // Build the RSS item's properties and attributes.
      $args = array(array(
        'key' => 'guid',
        'value' => $result['link'],
        'attributes' => array(
          'isPermaLink' => 'false',
        ),
        'relevance:score' => isset($result['score']) ? (float) $result['score'] : NULL,
      ));

      // Allow third-party modules to alter the RSS items.
      drupal_alter('opensearch_rss_item', $result, $args);

      // Format the the search result as an RSS item.
      $items .= format_rss_item(
        $result['title'], $result['link'], $result['snippet'], $args
      );
    }

    $description = $this->checkPlain($this->settings['rss_description']);
    $title = $this->checkPlain($this->settings['rss_title']);

    $query = array();
    foreach ($_GET as $index => $value) {
      if ($index != 'q') {
        $query[$index] = $value;

        if ($index == 'page') {
          $query[$index]++;
        }
      }
    }

    $args = array(
      'opensearch:totalResults' => isset($GLOBALS['pager_total_items'][0]) ? $GLOBALS['pager_total_items'][0] : 0,
      'opensearch:startIndex' => isset($GLOBALS['pager_page_array'][0]) ? $GLOBALS['pager_page_array'][0] * 10 + 1 : 1,
      'opensearch:itemsPerPage' => 10,
      array(
        'key' => 'atom:link',
        'attributes' => array(
          'rel' => 'self',
          'href' => $this->url('opensearch', '/' . drupal_urlencode($keywords), array('query' => $query)),
          'type' => 'application/rss+xml',
        ),
      ),
      array(
        'key' => 'atom:link',
        'attributes' => array(
          'rel' => 'search',
          'href' => $this->url('opensearch'),
          'type' => 'application/opensearchdescription+xml',
        ),
      ),
      array(
        'key' => 'atom:link',
        'attributes' => array(
          'rel' => 'alternate',
          'href' => $this->url('search'),
          'type' => 'text/html',
        ),
      ),
      array(
        'key' => 'opensearch:Query',
        'attributes' => array('role' => 'request', 'searchTerms' => $keywords),
      ),
    );

    // Allow third-party modules to alter the RSS channel.
    drupal_alter('opensearch_rss_channel', $namespace, $args);

    $output = array();
    $output[] = '<?xml version="1.0" encoding="utf-8" ?>';
    $output[] = '<rss version="2.0"' . drupal_attributes($namespaces) . '>';
    $output[] = format_rss_channel($title, $base_url, $description, $items, NULL, $args);
    $output[] = '</rss>';

    drupal_set_header('Content-Type: application/rss+xml; charset=utf-8');
    print implode("\n", $output);
  }

  /**
   * Returns an instance of the class OpenSearch.
   *
   * @param $type
   *   The search module identifier; if the argument is not passed, the search
   *   identifier will be detected from the current URL.
   *
   * @return
   *   An instance of the class OpenSearch.
   */
  public static function getInstance($type = NULL, $settings = NULL) {
    if (!isset($type)) {
      $bool = (
        (arg(0) == 'search' || arg(0) == 'opensearch') &&
        ($module = arg(1)) &&
        module_invoke($module, 'search', 'name')
      );

      $type = $bool ? $module : '';
    }

    if (!$type) {
      return FALSE;
    }

    if ($type == '-default-') {
      $c = __CLASS__;
      $obj = new $c($type);
      $obj->loadSettings($settings);

      return $obj;
    }
    else {
      if (!module_exists($type)) {
        return FALSE;
      }

      // Do not consider modules that don't return a name.
      $name = module_invoke($type, 'search', 'name');
      if (empty($name)) {
        return FALSE;
      }

      // Check if this search type is enabled.
      $enabled = variable_get('opensearch_enabled_types');
      $bool = (
        empty($enabled) ||
        (isset($enabled) && in_array($type, array_filter($enabled)))
      );
      if ($bool) {
        $c = __CLASS__;
        $obj = new $c($type);
        $obj->loadSettings($settings);

        return $obj;
      }
    }

    return FALSE;
  }

  /**
   * Loads the search module settings.
   *
   * @param $settings
   *   The array containing the settings; if it's not passed, the settings will
   *   be loaded from the database.
   */
  function loadSettings($settings = NULL) {
    $this->settings = array();

    if (isset($settings)) {
      $this->settings = $settings;
    }
    else {
      $row = db_query_range(
        "SELECT settings FROM {opensearch} WHERE type = :type", 0, 1, array(':type' => $this->type)
      )->fetchField();
      if ($row) {
        $this->settings = empty($row->settings) ? array() : unserialize($row->settings);
      }
    }

    $this->settings += $this->defaultSettings();

    if ($this->type != '-default-') {
      $enabled = variable_get('opensearch_enabled_types');
      $bool = (
        empty($enabled) ||
        (isset($enabled) && in_array($this->type, array_filter($enabled)))
      );
      $this->settings['enabled'] = $bool;

      $enabled = variable_get('opensearch_enabled_feeds');
      $bool = (
        empty($enabled) ||
        (isset($enabled) && in_array($this->type, array_filter($enabled)))
      );
      $this->settings['feed'] = $bool;
    }
  }

  /**
   * Implements ArrayAccess::offsetExists().
   */
  function offsetExists($offset) {
    $value = $this->settings[$offset];

    return isset($value);
  }

  /**
   * Implements ArrayAccess::offsetGet().
   */
  function offsetGet($offset) {
    return $this->settings[$offset];
  }

  /**
   * Implements ArrayAccess::offsetSet().
   */
  function offsetSet($offset, $value) {
    if (!empty($offset)) {
      $this->settings[$offset] = $value;
    }
  }

  /**
   * Implements ArrayAccess::offsetUnset().
   */
  function offsetUnset($offset) {
    unset($this->settings[$offset]);
  }

  /**
   * Saves the module settings.
   */
  function saveSettings() {
    $result = db_query_range("SELECT id, type, settings FROM {opensearch} WHERE type = :type",
      0, 1, array(':type' => $this->type)
    )->fetchObject();

    if ($result === FALSE) {
      $row = new stdClass();
      $row->type = $this->type;
    }
    else {
      $row = $result;
    }

    $row->settings = $this->settings;

    drupal_write_record('opensearch', $row, $result === FALSE ? array() : 'id');
  }

  /**
   * Returns the identifier for the module implementing the search hook.
   */
  function type() {
    return $this->type;
  }

  /**
   * Removes the duplicates from a list of items separated from the separator,
   * preserving the order in which they appear.
   *
   * @param $text
   *   The string containing the list of items concatenated using $separator.
   * @param $separator
   *   The string used to split the string into an array. A space will be
   *   appended to the string before it is used to create the string from the
   *   array of unique items found in the string passed as argument.
   * @param $max_items
   *   The maximum number of items accepted in the returned array; the default
   *   value is -1, which means no limit.
   *
   * @return
   *   A string containing only unique items.
   */
  public static function uniqueValues($text, $separator = ' ', $max_items = -1) {
    $lc_values = array();
    $unique_values = array();

    if (empty($text)) {
      return '';
    }

    foreach (array_filter(array_map('trim', explode($separator, $text))) as $item) {
      $lowercase = drupal_strtolower($item);

      if (!in_array($lowercase, $lc_values)) {
        $lc_values[] = $lowercase;
        $unique_values[] = $item;
      }
    }

    if ($max_items > 0) {
      $unique_values = array_slice($unique_values, 0, $max_items);
    }

    return implode($separator, $unique_values);
  }

  /**
   * Generates an absolute OpenSearch URL.
   *
   * @param $prefix
   *   The prefix to add in the URL.
   * @param $suffix
   *   The suffix to add in the URL.
   *
   * @return
   *   A string containing the absolute URL.
   */
  function url($prefix, $suffix = '', array $options = array()) {
    $options += array('absolute' => TRUE);

    return url($prefix . '/' . $this->type . $suffix, $options);
  }

  /**
   * Log a system message for the OpenSearch feed module.
   *
   * @param $keywords
   *   The keywords used for the search.
   */
  function watchdog($keywords) {
    watchdog(
      'opensearch', '%keys (@type).', array('%keys' => $keywords, '@type' => module_invoke($this->type, 'search', 'name')), WATCHDOG_NOTICE, l(t('results'), 'search/' . $this->type . '/' . $keywords)
    );
  }
}

/**
 * Implements hook_hook_info().
 */
function opensearch_hook_info() {
  $hooks = array();

  $hooks['token_info'] = array(
    'group' => 'tokens',
  );
  $hooks['tokens'] = array(
    'group' => 'tokens',
  );

  return $hooks;
}

/**
 * Implements hook_init().
 */
function opensearch_init() {
  $headers = drupal_get_headers();

  // Verify the site is not offline, or Drupal is not returning an error page.
  $bool = (
    (
      variable_get('site_offline', FALSE) &&
      !user_access('administer site configuration')
    ) ||
    preg_match('@HTTP/1\.[01]\x20+403[^a-zA-Z0-9]@', $headers) ||
    preg_match('@HTTP/1\.[01]\x20+404[^a-zA-Z0-9]@', $headers)
  );
  if (!$bool) {
    if ($os = OpenSearch::getInstance()) {
      // If this is a search-related page, add the OpenSearch link for the current
      // search routine.
      $os->addLink();
      $os->addFeed();
    }
    else {
      // On non-search pages, add links for all available OpenSearches.
      foreach (module_implements('search') as $module) {
        if ($os = OpenSearch::getInstance($module)) {
          $os->addLink();
        }
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function opensearch_menu() {
  $items = array();

  $items['opensearch/%opensearch_type'] = array(
    'page callback' => 'opensearch_description',
    'page arguments' => array(1),
    'access arguments' => array('search content'),
    'type' => MENU_CALLBACK,
    'file' => 'opensearch.pages.inc',
  );

  $items['opensearch/%opensearch_type/%menu_tail'] = array(
    'page callback' => 'opensearch_view',
    'page arguments' => array(1),
    'access arguments' => array('search content'),
    'type' => MENU_CALLBACK,
    'file' => 'opensearch.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function opensearch_theme() {
  return array(
    'opensearch_description' => array(
      'render element' => 'opensearch',
      'template' => 'opensearch-description',
    ),
  );
}

/**
 * Menu object load function.
 */
function opensearch_type_load($type) {
  return OpenSearch::getInstance($type);
}

/**
 * Processes variables for opensearch-description.tpl.php.
 */
function template_preprocess_opensearch_description(&$variables) {
  global $base_path;

  $os = $variables['opensearch'];

  $variables['adult_content'] = $os['adult_content'];
  $variables['attribution'] = $os->checkPlain($os['attribution'], 256);
  $variables['contact'] = $os->checkPlain($os['contact']);
  $variables['description'] = $os->checkPlain($os['description'], 1024);
  $variables['longname'] = $os->checkPlain($os['longname'], 48);
  $variables['shortname'] = $os->checkPlain($os['shortname'], 16);
  $variables['syndication_right'] = $os['syndication_right'];
  $variables['tags'] = $os->uniqueValues(
    $os->checkPlain($os['tags'], 256)
  );
  $variables['url_opensearch'] = str_replace(
    array('%7B', '%7D', '&'),
    array('{', '}', '&amp;'),
    $os->url('opensearch', '/{searchTerms}')
  );
  $variables['url_search'] = str_replace(
    array('%7B', '%7D', '&'),
    array('{', '}', '&amp;'),
    $os->url('search', '/{searchTerms}')
  );
  $variables['url_self'] = $os->url('opensearch');

  $languages = language_list('enabled');
  $variables['languages'] = $languages[1];

  $bool = (
    $os['image_type'] == 'theme' ||
    $os['image_type'] == 'custom' &&
    empty($os['image_custom'])
  );
  if ($bool) {
    drupal_theme_initialize();
    $image_path = theme_get_setting('favicon');
  }
  else {
    $image_path = $os['image_custom'];
  }

  if (isset($image_path)) {
    if (strpos($image_path, $base_path) === 0) {
      $image_path = drupal_substr($image_path, drupal_strlen($base_path));
    }

    if (!empty($image_path)) {
      $attrs = array();
      $image_attributes = @getimagesize($image_path);

      if (!empty($image_attributes[0])) {
        $attrs['width'] = $image_attributes[0];
      }
      if (!empty($image_attributes[1])) {
        $attrs['height'] = $image_attributes[1];
      }
      if (!empty($image_attributes['mime'])) {
        $attrs['type'] = $image_attributes['mime'];
      }

      $variables['image_attributes'] = drupal_attributes($attrs);
      $variables['image_url'] = url($image_path, array('absolute' => TRUE));
    }
  }
}
