<?php
// $Id$

/**
 * Implementation of hook_menu().
 */
function opensearch_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/opensearch',
      'title' => t('opensearch'),
      'callback' => 'opensearch_admin_settings',
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );

    foreach (module_list() as $name) {
      if (module_hook($name, 'search') && $title = module_invoke($name, 'search', 'name')) {
        $items[] = array(
          'path' => 'opensearch/' . $name,
          'title' => $title,
          'callback' => 'opensearch_view',
          'access' => user_access('search content'),
          'type' => MENU_LOCAL_TASK);
      }
    }
  }
  else {
    $type = (arg(0) == 'search' && arg(1) != '') ? arg(1) : 'node';
    $search_type = check_plain(module_invoke($type, 'search', 'name'));
    $opensearch_shortname = t(check_plain(variable_get('opensearch_shortname', '@type search')), array('@type' => $search_type));
    drupal_add_link(array(
      'rel' => 'search',
      'href' => url('opensearch/'. $type, NULL, NULL, TRUE),
      'type' => 'application/opensearchdescription+xml',
      'title' => $opensearch_shortname
    ));
  }

  return $items;
}

function opensearch_admin_settings() {
  extract(opensearch_get_description_defaults(), EXTR_SKIP);

  foreach (module_implements('search') as $type) {
    $links[] = l("opensearch/$type", "opensearch/$type");
  }

  $form['description'] = array(
    '#type' => 'fieldset',
    '#title' => t('Description file'),
    '#collapsible' => true,
  );

  $form['description']['opensearch_prefix'] = array(
    '#type' => 'markup',
    '#value' => '<p>' . t('Your site offers the following OpenSearch description files: %links', array('%links' => theme('item_list', $links))) . '</p>',
  );
  $form['description']['opensearch_shortname'] = array(
    '#type' => 'textfield',
    '#title' => t('Short name'),
    '#default_value' => $opensearch_shortname,
    '#maxlength' => 16,
    '#size' => 16,
    '#description' => t("A brief name that will appear in buttons, UI controls, etc., that reference this search content provider. The placeholder <code>@type</code> will be replaced with the appropriate search type (content, user etc.)"),
    '#required' => true,
  );
  $form['description']['opensearch_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#default_value' => $opensearch_description,
    '#maxlength' => 1024,
    '#description' => t("A human readable text description of the search content provider. The placeholder <code>@site</code> will be replaced with your site's name, and <code>@type</code> will be replaced with the appropriate search type (content, user etc.)"),
    '#required' => true,
  );
  $form['description']['opensearch_contact'] = array(
    '#type' => 'textfield',
    '#title' => t('Contact'),
    '#default_value' => $opensearch_contact,
    '#maxlength' => 64,
    '#description' => t("An email address at which the developer can be reached."),
  );
  $form['description']['opensearch_tags'] = array(
    '#type' => 'textfield',
    '#title' => t('Tags'),
    '#default_value' => $opensearch_tags,
    '#maxlength' => 256,
    '#description' => t("A space-delimited set of words that are used as keywords to identify and categorize this site's search content."),
  );
  $form['description']['opensearch_longname'] = array(
    '#type' => 'textfield',
    '#title' => t('Long name'),
    '#default_value' => $opensearch_longname,
    '#maxlength' => 48,
    '#size' => 48,
    '#description' => t("The name by which this search content provider is referred to in hypertext links, etc.  The placeholder <code>@site</code> will be replaced with your site's name, and <code>@type</code> will be replaced with the appropriate search type (content, user etc.)"),
  );
  $form['description']['opensearch_attribution'] = array(
    '#type' => 'textfield',
    '#title' => t('Attribution'),
    '#default_value' => $opensearch_attribution,
    '#maxlength' => 256,
    '#description' => t("A list of all content sources or platforms that should be credited."),
  );
  $form['description']['opensearch_syndication_right'] = array(
    '#type' => 'radios',
    '#title' => t('Syndication right'),
    '#default_value' => $opensearch_syndication_right,
    '#options' => array(
      'open' => t('open - search results can be published or re-published without restriction. This is the default.'),
      'limited' => t('limited - search results can be published on the client site, but not further republished.'),
      'private' => t('private - search feed may be queried, but the results may not be displayed at the client site.'),
      'closed' => t('closed - search feed should not be queried, and will disable the column for searches.'),
    ),
    '#description' => t('The degree to which the search results provided by this search engine can be distributed.'),
  );
  $form['description']['opensearch_adult_content'] = array(
    '#type' => 'checkbox',
    '#title' => t('AdultContent'),
    '#description' => t('A boolean flag that must be set if the content provided is not suitable for minors.'),
    '#default_value' => $opensearch_adult_content,
  );

  return system_settings_form('opensearch_admin_settings', $form);
}


function opensearch_form_alter($form_id, &$form) {
  if ($form_id == 'search_form' && arg(2)) {
    // for pagination etc.
    $get = drupal_query_string_encode($_GET, array('q'));
    if (trim($get)) {
      $get = '?'. $get;
    }
    $form['basic']['inline']['rss'] = array('#type' => 'markup', '#value' => theme('xml_icon', url('opensearch/' . arg(1). '/'. urlencode(search_get_keys()). $get)));
  }
}

/**
 * Menu callback; presents an opensearch results page.
 */
function opensearch_view() {
  $type = arg(1);
  $keys = search_get_keys();

  // OpenSearch pages are 1-indexed
  $_GET['page']--;

  // Only perform search if there is non-whitespace search term:
  if (!module_hook($type, 'search')) {
    return drupal_not_found();
  }

  if (trim($keys)) {
    // Log the search keys:
    watchdog('search', t('OpenSearch: %keys (@type).', array('%keys' => $keys, '@type' => module_invoke($type, 'search', 'name'))), WATCHDOG_NOTICE, l(t('results'), 'search/' . $type . '/' . $keys));

    // Collect the search results:
    $results = module_invoke($type, 'search', 'search', $keys);

    return opensearch_feed($type, $keys, $results);
  }
  else {
    return opensearch_description($type);
  }
}

/**
 * Return an open search results feed.
 */
function opensearch_feed($type, $keys, $results) {
  global $base_url, $locale;

  $namespaces = array(
    'xmlns:dc="http://purl.org/dc/elements/1.1/"',
    'xmlns:opensearch="http://a9.com/-/spec/opensearch/1.1/"',
    'xmlns:relevance="http://a9.com/-/opensearch/extensions/relevance/1.0/"'
  );

  foreach ($results as $result) {
    $items .= format_rss_item($result['title'], $result['link'], $result['snippet'], array('relevance:score' => (float)$result['score']));
  }

  $args = array(
    'opensearch:totalResults' => $GLOBALS['pager_total_items'][0],
    'opensearch:startIndex' => $GLOBALS['pager_page_array'][0] * 10 + 1,
    'opensearch:itemsPerPage' => 10,
    array('key' => 'opensearch:link', 'attributes' => array('href' => url('opensearch/'. $type, NULL, NULL, TRUE), 'type' => 'application/opensearchdescription+xml')),
    array('key' => 'opensearch:Query', 'attributes' => array('role' => 'request', 'searchTerms' => $keys)),
  );

  $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
  $output .= "<rss version=\"2.0\" xml:base=\"". url('', NULL, NULL, TRUE) ."\" ". implode(' ', $namespaces) .">\n";
  $output .= format_rss_channel(
    $keys .' - '. variable_get('site_name', 'drupal') .' '. module_invoke($type, 'search', 'name') .' '. t('search'),
    $base_url,
    variable_get('site_mission', ''),
    $items,
    $locale,
    $args
  );
  $output .= "</rss>\n";

  drupal_set_header('Content-Type: application/rss+xml; charset=utf-8');
  print $output;
}

/**
 * Defines some default values for the description file
 *
 * @param string $type
 *   'node', 'user', or any other type for which hook_search is implemented
 * @return  Array $args
 *   meant to be added to the local scope of the calling function using extract()
 */
function opensearch_get_description_defaults() {
  $args = array();
  // check_plain()s are needed for valid XML
  $args['opensearch_shortname'] = check_plain(variable_get('opensearch_shortname', '@type search'));
  $args['opensearch_description'] = check_plain(variable_get('opensearch_description', t('@type search for @site.')));
  $args['opensearch_contact'] =  check_plain(variable_get('opensearch_contact', variable_get('site_mail', ini_get('sendmail_from'))));
  $args['opensearch_tags'] = check_plain(variable_get('opensearch_tags', ''));
  $args['opensearch_longname'] = check_plain(variable_get('opensearch_longname', $args['opensearch_description']));
  $args['opensearch_attribution'] = check_plain(variable_get('opensearch_attribution', ''));
  $args['opensearch_syndication_right'] = check_plain(variable_get('opensearch_syndication_right', 'open'));
  $args['opensearch_adult_content'] = check_plain(variable_get('opensearch_adult_content', 0));

  return $args;
}

/**
 * Return an open search description feed.
 */
function opensearch_description($type) {
  global $base_url, $locale;
  extract(opensearch_get_description_defaults(), EXTR_SKIP);

  $search_type = check_plain(module_invoke($type, 'search', 'name'));
  $site_name = check_plain(variable_get('site_name', 'drupal'));
  $opensearch_shortname = t($opensearch_shortname, array('@type' => $search_type));
  $opensearch_description = t($opensearch_description, array('@site' => $site_name, '@type' => $search_type));
  $opensearch_longname = t($opensearch_longname, array('@site' => $site_name, '@type' => $search_type));
  $url = check_url($base_url);
  $url_search = str_replace(array('%7B', '%7D', '&'), array('{', '}', '&amp;'), url('search/' . $type . '/{searchTerms}', 'page={startPage}', NULL, TRUE));
  $url_opensearch = str_replace(array('%7B', '%7D', '&'), array('{', '}', '&amp;'), url('opensearch/' . $type . '/{searchTerms}', 'page={startPage}', NULL, TRUE));
  $output = <<<DOC
<?xml version="1.0" encoding="UTF-8"?>
<OpenSearchDescription xmlns="http://a9.com/-/spec/opensearch/1.1/">
  <ShortName>$opensearch_shortname</ShortName>
  <Description>$opensearch_description</Description>
  <Contact>$opensearch_contact</Contact>
  <Url type="text/html"
       template="$url_search"/>
  <Url type="application/rss+xml"
       template="$url_opensearch"/>
DOC;

  if ($opensearch_tags != '') {
    $output .= "\n  <Tags>$opensearch_tags</Tags>";
  }
  if ($opensearch_longname != '') {
    $output .= "\n  <LongName>$opensearch_longname</LongName>";
  }
  if ($opensearch_attribution) {
    $output .= "\n  <Attribution>$opensearch_attribution</Attribution>";
  }
  if ($opensearch_syndication_right) {
    $output .= "\n  <SyndicationRight>$opensearch_syndication_right</SyndicationRight>";
  }
  $output .= "\n  <AdultContent>$opensearch_adult_content</AdultContent>";

  // Locales
  if (module_exists('locale')) {
    $locales = locale_supported_languages();
    $locales = $locales['name'];
  }
  else {
    $locales = array($locale => $locale);
  }
  foreach (array_keys($locales) as $language) {
    $output .= "\n  <Language>$language</Language>";
  }

  // Images: both logo and favicon can be provided
  // Themes haven't been initialized yet, so do it explicitely
  init_theme();
  $logo = theme_get_setting('logo');
  if (theme_get_setting('toggle_logo') && ($logo_url = check_url(theme_get_setting('logo_path')))) {
    list($width, $height, $type, $image_attributes) = @getimagesize($logo_url);
    $logo_url = $url. '/'. $logo_url;
    if ($height) {
      $height = 'height="'. $height. '"';
    }
    if ($width) {
      $width = 'width="'. $width. '"';
    }
    if ($type) {
      $type = 'type="'. image_type_to_mime_type($type). '"';
    }
    $output .= "\n  <Image $height $width $type>$logo_url</Image>";
  }
  if (theme_get_setting('toggle_favicon') && ($favicon_url = check_url(theme_get_setting('favicon')))) {
    // The favicon URL comes (inconveniently) with an extra /
    if (substr($favicon_url, 0, 1) == '/') {
      $favicon_url = substr($favicon_url, 1);
    }
    list($width, $height, $type, $image_attributes) = @getimagesize($favicon_url);
    $favicon_url = $url . '/' . $favicon_url;
    if ($height) {
      $height = 'height="'. $height. '"';
    }
    if ($width) {
      $width = 'width="'. $width. '"';
    }
    if ($type) {
      $type = 'type="' . image_type_to_mime_type($type) . '"';
    }
    $output .= "\n  <Image $height $width $type>$favicon_url</Image>";
  }

  $output .= "\n</OpenSearchDescription>";
  // application/opensearchdescription+xml is not standard.
  drupal_set_header('Content-Type: application/xml; charset=utf-8');
  print $output;
}
